function [] = demo_oufunction [] = demo_SMMH(bits, dataname)
%myFun - Description
%
% Syntax: [] = demo_SMMH(bits, dataname)
%
% Long description

warning off;
%% Dataset Loading
addpath('../../Data');

if strcmp(dataname, 'flickr')
    [I_te, T_te, L_te, I_db, T_db, L_db, I_tr, T_tr, L_tr] = construct_mir();
elseif strcmp(dataname, 'nuswide')
     [I_te, T_te, L_te, I_db, T_db, L_db, I_tr, T_tr, L_tr] = construct_nus();
elseif strcmp(dataname, 'coco')
    [I_te, T_te, L_te, I_db, T_db, L_db, I_tr, T_tr, L_tr] = construct_coco();
else
    fprintf('ERROR dataname!');
end

if strcmp(dataname, 'flickr')
    alpha = 1e-3;
    beta = 1e-3;
    theta = 1e-3;
    gamma = 1e-3;
    rho = 1e-3;
    eta = 1e3;
    n_anchors = 500;
elseif strcmp(dataname, 'nuswide')
    alpha = 1e1;
    beta = 1e-3;
    theta = 1e-2;
    gamma = 1e-5;
    rho = 1e-3;
    eta = 1e3;
    n_anchors = 800;
elseif strcmp(dataname, 'coco')
   alpha = 1e-5;
    beta = 1e-1;
    theta = 1e-2;
    gamma = 1e-5;
    rho = 1e-1;
    eta = 1e-1;
    n_anchors =800;
else
    fprintf('ERROR paramethers!');
end

%% Training & Evaluation Process
fprintf('\n============================================Start training CHMR-our============================================\n');
run = 1;
bits = str2num(bits);

param.alpha = alpha;
param.beta = beta;
param.theta = theta;
param.gamma = gamma;
param.rho = rho;
param.n_anchors = n_anchors;
param.t = 2;
param.bits = bits;
param.eta = eta;

mapITIT = zeros(run,1);
mapII = zeros(run,1);
mapTT = zeros(run,1);
mapTI = zeros(run,1);
mapIT = zeros(run,1);

%% Data preparing
tic
Ntrain = size(I_tr,1);
S = 2*L_tr*L_tr'-ones(Ntrain);
sample = randsample(Ntrain, n_anchors);
anchorI = I_tr(sample,:);
anchorT = T_tr(sample,:);

M1=mean(anchorI,1);
M2=mean(anchorT,1);
PP1=anchorI- repmat(M1,n_anchors,1);
PP2=anchorT- repmat(M2,n_anchors,1);
v1=sum(sum(PP1.^2));
v2=sum(sum(PP2.^2));
sigmaI=sqrt(v1/n_anchors-1);
sigmaT=sqrt(v2/n_anchors-1);
%             sigmaI = 67;
%             sigmaT = 2;
PhiI = exp(-sqdist(I_tr,anchorI)/(2*sigmaI*sigmaI));
PhiI = [PhiI, ones(Ntrain,1)];
PhtT = exp(-sqdist(T_tr,anchorT)/(2*sigmaT*sigmaT));
PhtT = [PhtT, ones(Ntrain,1)];

Phi_testI = exp(-sqdist(I_te,anchorI)/(2*sigmaI*sigmaI));
Phi_testI = [Phi_testI, ones(size(Phi_testI,1),1)];
Pht_testT = exp(-sqdist(T_te,anchorT)/(2*sigmaT*sigmaT));
Pht_testT = [Pht_testT, ones(size(Pht_testT,1),1)];

Phi_dbI = exp(-sqdist(I_db,anchorI)/(2*sigmaI*sigmaI));
Phi_dbI = [Phi_dbI, ones(size(Phi_dbI,1),1)];
Pht_dbT = exp(-sqdist(T_db,anchorT)/(2*sigmaT*sigmaT));
Pht_dbT = [Pht_dbT, ones(size(Pht_dbT,1),1)];
S = bits*S;
S(S==0) = -bits;
toc
for j = 1:run
    tic
    [B_db,B_test,B_dbI,B_testI,B_dbT,B_testT] = solve(PhiI, PhtT,Phi_testI,Pht_testT,Phi_dbI,Pht_dbT, param,S,L_tr);
    toc
    tic
    B_db=compactbit(B_db);
    B_test=compactbit(B_test);
    B_dbI=compactbit(B_dbI);
    B_testI=compactbit(B_testI);
    B_dbT=compactbit(B_dbT);
    B_testT=compactbit(B_testT);
   
    fprintf('start evaluating...\n');
    DhITIT = hammingDist(B_db, B_test);
    [P1] = perf_metric4Label( L_db, L_te, DhITIT);
    mapITIT=P1;
    
    
    DhTI = hammingDist(B_dbI, B_testT);
    [P4] = perf_metric4Label( L_db, L_te, DhTI);
    mapTI(j) = P4;
    
    DhIT= hammingDist(B_dbT, B_testI);
    [P5] = perf_metric4Label( L_db, L_te, DhIT);
    mapIT(j) = P5;
    toc
end

 
fprintf('[%s-%s] ITIT MAP = %.4f\n', dataname, num2str(bits), mean(mapITIT));
fprintf('[%s-%s] TI MAP = %.4f\n', dataname, num2str(bits), mean(mapTI));
fprintf('[%s-%s] IT MAP = %.4f\n', dataname, num2str(bits),  mean(mapIT));
end

function [B_db,B_test,B_dbI,B_testI,B_dbT,B_testT] = solve(phi_x1, phi_x2,Phi_testI,Pht_testT,Phi_dbI,Pht_dbT, param,S,L_tr)
[col,row] = size(phi_x1);
[~,LL] = size(L_tr);
n_anchors = param.n_anchors;
mu1 = 0.5;
mu2 = 0.5;
alpha = param.alpha;
beta  = param.beta;
t = param.t;
theta = param.theta;
gamma = param.gamma;
rho = param.rho;
bits = param.bits;
eta = param.eta;

B1 = sign(-1+(1-(-1))*rand(col,bits));
B2 = B1;
R1 =(phi_x1'*phi_x1+gamma*eye(n_anchors+1))\(phi_x1'*B1);
R2 =(phi_x2'*phi_x2+rho*eye(n_anchors+1))\(phi_x2'*B2);

B = [B1,B2];
Z = [B1,B2];
H = B-Z;

C = randn(2*bits,LL);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
threshold = 0.0001;
lastF = 10000000000;
iter = 1;
%% Iterative algorithm
c=[];
while (iter<20)
    Z   =  sign(-alpha*B*C*L_tr'*L_tr*C'+ eta*B + H);
    H   =  H + eta*(B-Z);
    eta =  0.01*eta;
    
    %R1,R2
    R1 = (phi_x1'*phi_x1+gamma*eye(n_anchors+1))\(phi_x1'*B1);
    R2 = (phi_x2'*phi_x2+rho*eye(n_anchors+1))\(phi_x2'*B2);
    
    %C
    C = (alpha*B'*B+beta*eye(2*bits))\(alpha*B'*S*L_tr+beta*B'*L_tr)/(L_tr'*L_tr);
    
    %B
    tt = [mu1*phi_x1*R1,mu2*phi_x2*R2];
    B = sign(tt + 2*alpha*bits*S*L_tr*C'+ 2*beta*L_tr*C' - alpha*Z*C*L_tr'*L_tr*C' + eta*Z - H);
    %B1 B2
    B1 = B(1:col, 1:bits);
    B2 = B(1:col, bits+1:end);
    
    %mu
    h1 = sum(sum((B1-phi_x1*R1).^2));
    h2 = sum(sum((B2-phi_x2*R2).^2));
    mu1 = ((1/h1).^(1/(t-1))) / ((1/h1).^(1/(t-1))+(1/h2).^(1/(t-1)));
    mu2 = ((1/h2).^(1/(t-1))) / ((1/h1).^(1/(t-1))+(1/h2).^(1/(t-1)));
    
    %W
    Phi_X = [sqrt(mu1)*phi_x1, sqrt(mu2)*phi_x2];
    W = (Phi_X'* Phi_X+theta*eye(2*n_anchors+2))\(Phi_X'*B);
    
    
    norm1 = mean(mean(((B1-phi_x1*R1)).^2))+ gamma*mean(mean(R1).^2);
    norm2 = mean(mean(((B2-phi_x2*R2)).^2))+ rho*mean(mean(R2).^2);
    norm3 = mean(mean((bits*S-B*C*L_tr').^2));
    norm4 = mean(mean((B'-C*L_tr').^2));
    norm5 = mean(mean((B-Phi_X*W).^2))+theta*mean(mean(W).^2);
    
    currentF = norm1 + norm2 + alpha*norm3 + beta*norm4 + norm5;
    fprintf('currentF at iteration %d: %.2f; obj: %.4f\n', iter, currentF, lastF - currentF);     
     disp( currentF);
        if (lastF-currentF)<threshold
            if iter >4
                break
            end
         end
    iter = iter + 1;
    lastF = currentF;
end

Phi_test = [Phi_testI,Pht_testT];
Phi_db = [Phi_dbI,Pht_dbT];
B_db = (Phi_db * W)>0;
B_test = (Phi_test * W)>0;

B1=B(1:col, 1:bits);
R1 =(phi_x1'*phi_x1+gamma*eye(n_anchors+1))\(phi_x1'*B1);
B_dbI = (Phi_dbI *R1)>0;
B_testI = (Phi_testI *R1)>0;

B2=B(1:col, bits+1:end);
R2 =(phi_x2'*phi_x2+rho*eye(n_anchors+1))\(phi_x2'*B2);
B_dbT = (Pht_dbT *R2)>0;
B_testT = (Pht_testT *R2)>0;
end

rSMMH(bits, dataname)
%myFun - Description
%
% Syntax: [] = demo_SMMH(bits, dataname)
%
% Long description

warning off;
%% Dataset Loading
addpath('../../Data');

if strcmp(dataname, 'flickr')
    [I_te, T_te, L_te, I_db, T_db, L_db, I_tr, T_tr, L_tr] = construct_mir();
elseif strcmp(dataname, 'nuswide')
     [I_te, T_te, L_te, I_db, T_db, L_db, I_tr, T_tr, L_tr] = construct_nus();
elseif strcmp(dataname, 'coco')
    [I_te, T_te, L_te, I_db, T_db, L_db, I_tr, T_tr, L_tr] = construct_coco();
else
    fprintf('ERROR dataname!');
end

if strcmp(dataname, 'flickr')
    alpha = 1e-3;
    beta = 1e-3;
    theta = 1e-3;
    gamma = 1e-3;
    rho = 1e-3;
    eta = 1e3;
    n_anchors = 500;
elseif strcmp(dataname, 'nuswide')
    alpha = 1e1;
    beta = 1e-3;
    theta = 1e-2;
    gamma = 1e-5;
    rho = 1e-3;
    eta = 1e3;
    n_anchors = 800;
elseif strcmp(dataname, 'coco')
   alpha = 1e-5;
    beta = 1e-1;
    theta = 1e-2;
    gamma = 1e-5;
    rho = 1e-1;
    eta = 1e-1;
    n_anchors =800;
else
    fprintf('ERROR paramethers!');
end

%% Training & Evaluation Process
fprintf('\n============================================Start training CHMR-our============================================\n');
run = 1;
bits = str2num(bits);

param.alpha = alpha;
param.beta = beta;
param.theta = theta;
param.gamma = gamma;
param.rho = rho;
param.n_anchors = n_anchors;
param.t = 2;
param.bits = bits;
param.eta = eta;

mapITIT = zeros(run,1);
mapII = zeros(run,1);
mapTT = zeros(run,1);
mapTI = zeros(run,1);
mapIT = zeros(run,1);

%% Data preparing
tic
Ntrain = size(I_tr,1);
S = 2*L_tr*L_tr'-ones(Ntrain);
sample = randsample(Ntrain, n_anchors);
anchorI = I_tr(sample,:);
anchorT = T_tr(sample,:);

M1=mean(anchorI,1);
M2=mean(anchorT,1);
PP1=anchorI- repmat(M1,n_anchors,1);
PP2=anchorT- repmat(M2,n_anchors,1);
v1=sum(sum(PP1.^2));
v2=sum(sum(PP2.^2));
sigmaI=sqrt(v1/n_anchors-1);
sigmaT=sqrt(v2/n_anchors-1);
%             sigmaI = 67;
%             sigmaT = 2;
PhiI = exp(-sqdist(I_tr,anchorI)/(2*sigmaI*sigmaI));
PhiI = [PhiI, ones(Ntrain,1)];
PhtT = exp(-sqdist(T_tr,anchorT)/(2*sigmaT*sigmaT));
PhtT = [PhtT, ones(Ntrain,1)];

Phi_testI = exp(-sqdist(I_te,anchorI)/(2*sigmaI*sigmaI));
Phi_testI = [Phi_testI, ones(size(Phi_testI,1),1)];
Pht_testT = exp(-sqdist(T_te,anchorT)/(2*sigmaT*sigmaT));
Pht_testT = [Pht_testT, ones(size(Pht_testT,1),1)];

Phi_dbI = exp(-sqdist(I_db,anchorI)/(2*sigmaI*sigmaI));
Phi_dbI = [Phi_dbI, ones(size(Phi_dbI,1),1)];
Pht_dbT = exp(-sqdist(T_db,anchorT)/(2*sigmaT*sigmaT));
Pht_dbT = [Pht_dbT, ones(size(Pht_dbT,1),1)];
S = bits*S;
S(S==0) = -bits;
toc
for j = 1:run
    tic
    [B_db,B_test,B_dbI,B_testI,B_dbT,B_testT] = solve(PhiI, PhtT,Phi_testI,Pht_testT,Phi_dbI,Pht_dbT, param,S,L_tr);
    toc
    tic
    B_db=compactbit(B_db);
    B_test=compactbit(B_test);
    B_dbI=compactbit(B_dbI);
    B_testI=compactbit(B_testI);
    B_dbT=compactbit(B_dbT);
    B_testT=compactbit(B_testT);
   
    fprintf('start evaluating...\n');
    DhITIT = hammingDist(B_db, B_test);
    [P1] = perf_metric4Label( L_db, L_te, DhITIT);
    mapITIT=P1;
    
    
    DhTI = hammingDist(B_dbI, B_testT);
    [P4] = perf_metric4Label( L_db, L_te, DhTI);
    mapTI(j) = P4;
    
    DhIT= hammingDist(B_dbT, B_testI);
    [P5] = perf_metric4Label( L_db, L_te, DhIT);
    mapIT(j) = P5;
    toc
end

 
fprintf('[%s-%s] ITIT MAP = %.4f\n', dataname, num2str(bits), mean(mapITIT));
fprintf('[%s-%s] TI MAP = %.4f\n', dataname, num2str(bits), mean(mapTI));
fprintf('[%s-%s] IT MAP = %.4f\n', dataname, num2str(bits),  mean(mapIT));
end

function [B_db,B_test,B_dbI,B_testI,B_dbT,B_testT] = solve(phi_x1, phi_x2,Phi_testI,Pht_testT,Phi_dbI,Pht_dbT, param,S,L_tr)
[col,row] = size(phi_x1);
[~,LL] = size(L_tr);
n_anchors = param.n_anchors;
mu1 = 0.5;
mu2 = 0.5;
alpha = param.alpha;
beta  = param.beta;
t = param.t;
theta = param.theta;
gamma = param.gamma;
rho = param.rho;
bits = param.bits;
eta = param.eta;

B1 = sign(-1+(1-(-1))*rand(col,bits));
B2 = B1;
R1 =(phi_x1'*phi_x1+gamma*eye(n_anchors+1))\(phi_x1'*B1);
R2 =(phi_x2'*phi_x2+rho*eye(n_anchors+1))\(phi_x2'*B2);

B = [B1,B2];
Z = [B1,B2];
H = B-Z;

C = randn(2*bits,LL);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
threshold = 0.0001;
lastF = 10000000000;
iter = 1;
%% Iterative algorithm
c=[];
while (iter<20)
    Z   =  sign(-alpha*B*C*L_tr'*L_tr*C'+ eta*B + H);
    H   =  H + eta*(B-Z);
    eta =  0.01*eta;
    
    %R1,R2
    R1 = (phi_x1'*phi_x1+gamma*eye(n_anchors+1))\(phi_x1'*B1);
    R2 = (phi_x2'*phi_x2+rho*eye(n_anchors+1))\(phi_x2'*B2);
    
    %C
    C = (alpha*B'*B+beta*eye(2*bits))\(alpha*B'*S*L_tr+beta*B'*L_tr)/(L_tr'*L_tr);
    
    %B
    tt = [mu1*phi_x1*R1,mu2*phi_x2*R2];
    B = sign(tt + 2*alpha*bits*S*L_tr*C'+ 2*beta*L_tr*C' - alpha*Z*C*L_tr'*L_tr*C' + eta*Z - H);
    %B1 B2
    B1 = B(1:col, 1:bits);
    B2 = B(1:col, bits+1:end);
    
    %mu
    h1 = sum(sum((B1-phi_x1*R1).^2));
    h2 = sum(sum((B2-phi_x2*R2).^2));
    mu1 = ((1/h1).^(1/(t-1))) / ((1/h1).^(1/(t-1))+(1/h2).^(1/(t-1)));
    mu2 = ((1/h2).^(1/(t-1))) / ((1/h1).^(1/(t-1))+(1/h2).^(1/(t-1)));
    
    %W
    Phi_X = [sqrt(mu1)*phi_x1, sqrt(mu2)*phi_x2];
    W = (Phi_X'* Phi_X+theta*eye(2*n_anchors+2))\(Phi_X'*B);
    
    
    norm1 = mean(mean(((B1-phi_x1*R1)).^2))+ gamma*mean(mean(R1).^2);
    norm2 = mean(mean(((B2-phi_x2*R2)).^2))+ rho*mean(mean(R2).^2);
    norm3 = mean(mean((bits*S-B*C*L_tr').^2));
    norm4 = mean(mean((B'-C*L_tr').^2));
    norm5 = mean(mean((B-Phi_X*W).^2))+theta*mean(mean(W).^2);
    
    currentF = norm1 + norm2 + alpha*norm3 + beta*norm4 + norm5;
    fprintf('currentF at iteration %d: %.2f; obj: %.4f\n', iter, currentF, lastF - currentF);     
     disp( currentF);
        if (lastF-currentF)<threshold
            if iter >4
                break
            end
         end
    iter = iter + 1;
    lastF = currentF;
end

Phi_test = [Phi_testI,Pht_testT];
Phi_db = [Phi_dbI,Pht_dbT];
B_db = (Phi_db * W)>0;
B_test = (Phi_test * W)>0;

B1=B(1:col, 1:bits);
R1 =(phi_x1'*phi_x1+gamma*eye(n_anchors+1))\(phi_x1'*B1);
B_dbI = (Phi_dbI *R1)>0;
B_testI = (Phi_testI *R1)>0;

B2=B(1:col, bits+1:end);
R2 =(phi_x2'*phi_x2+rho*eye(n_anchors+1))\(phi_x2'*B2);
B_dbT = (Pht_dbT *R2)>0;
B_testT = (Pht_testT *R2)>0;
end

